--interface computer
--this program is used by players to interact with the system.

local unpack = unpack or table.unpack

--initial configuration defaults
local config = {
	-- base master configuration file
	baseCode = "",
	plainSearch = true
}

if not os.loadAPI("base") then error("Could not load base API!") end
if not os.loadAPI("framebuffer") then error("Could not load framebuffer API!") end
if not os.loadAPI("configuration") then error("Could not load configuration API!") end
if fs.exists("interface.conf") then
	config = configuration.load("interface.conf")
else
	--initial setup
	print("Initial Setup for User Interface")
	base.setup(config, true, "Determine the direction by looking directly at the front face of this computer.")
	do
		local facingVec = {
			vector.new(1, 0, 0),
			vector.new(0, 0, 1),
			vector.new(-1, 0, 0),
			vector.new(0, 0, -1)
		}
		config.locations = {
			{location = config.location + facingVec[config.facing], capabilities = "accept-items"},
		}
	end
	configuration.save("interface.conf", config)
end

peripheral.find("modem", function(name) rednet.open(name) end)

base.initialize(config.baseCode)

local width, height = term.getSize()
local co = {}
local data, step = {}, 0
local items = {}
local sortedItems = {}
local search = ""
local selected = ""
local lineSelection = -1
local chosen
local sorts = {
	count = {
		[1] = function(a, b) return a.count < b.count end,
		[-1] = function(a, b) return a.count > b.count end,
	},
	name = {
		[1] = function(a, b) return (a.prettyName or a.name) < (b.prettyName or b.name) end,
		[-1] = function(a, b) return (a.prettyName or a.name) > (b.prettyName or b.name) end,
	},
}
local sortType, sortDirection = "name", 1

local function rebuildItems()
	local tab, n = {}, 0
	for name, damages in pairs(items) do
		for damage, count in pairs(damages) do
			local object = {class = "item", name = name, damage = damage, count = count}
			base.fillObjectData(object)
			if data[object.hash] then
				object.prettyName = data[object.hash].name
			end
			if #search > 0 then
				--only add items that meet the search criteria
				local added = false
				if object.prettyName then
					if string.find(object.prettyName, search, 1, config.plainSearch) then
						n = n + 1
						tab[n] = object
						added = true
					end
				end
				if not added then
					if string.find(object.name, search, 1, config.plainSearch) then
						n = n + 1
						tab[n] = object
					end
				end
			else
				n = n + 1
				tab[n] = object
			end
		end
	end
	sortedItems = tab
	table.sort(sortedItems, sorts[sortType][sortDirection])
	if #selected > 0 then
		local found = false
		for i, info in ipairs(sortedItems) do
			if info.hash == selected then
				lineSelection = i
				found = true
				break
			end
		end
		if not found then
			lineSelection = -1
			selected = ""
		end
	end
end

local function getDisplayCount(count)
	if count < 10000 then
		return tostring(count)
	elseif count < 1000000 then
		--display in k
		count = math.floor(count / 100)
		return tostring(count / 10).."k"
	elseif count < 1000000000 then
		--display in M
		count = math.floor(count / 100000)
		return tostring(count / 10).."M"
	elseif count < 1000000000000 then
		--display in B
		count = math.floor(count / 100000000)
		return tostring(count / 10).."B"
	elseif count < 1000000000000000 then
		--display in T
		count = math.floor(count / 100000000000)
		return tostring(count / 10).."T"
	else
		return "many"
	end
end

local function modal()
	local quantity = ""
	local w, h = term.getSize()
	local blankLine = string.rep(" ", w)
	local pos, sx = 0, 2

	local function redraw()
		term.setBackgroundColor(colors.lightGray)
		term.setCursorPos(1, 1)
		term.write(blankLine)
		term.setCursorPos(1, 2)
		term.write(" Desired Quantity: ")
		term.setCursorPos(1, 3)
		term.write(blankLine)
		do
			--quantity input line
			term.setCursorPos(1, 4)
			term.write(" ")
			local width = w - 2
			term.setBackgroundColor(colors.white)
			term.setTextColor(colors.black)
			local scroll = 0
			if sx + pos >= width then
				scroll = (sx + nPos) - width
			end

			local cx,cy = term.getCursorPos()
			term.setCursorPos(sx, cy)
			local viewLen = cx - sx + 1
			if #quantity < viewLen then
				term.write(quantity..string.rep(" ", viewLen - #quantity))
			else
				term.write(string.sub(quantity, scroll + 1))
			end
			term.setBackgroundColor(colors.lightGray)
			term.setTextColor(colors.white)
			term.write(" ")
		end
		term.setCursorPos(1, 5)
		term.write(blankLine)
		do
			--ok/cancel line
			term.setCursorPos(1, 6)
			term.write(" ")
			term.setBackgroundColor(colors.lime)
			term.write("   OK   ")
			term.setBackgroundColor(colors.lightGray)
			term.write(" ")
			term.setBackgroundColor(colors.red)
			term.write(" CANCEL ")
			term.setBackgroundColor(colors.lightGray)
			term.write(" ")
		end
		term.setCursorPos(1, 7)
		term.write(blankLine)
	end

	redraw()

	while true do
		local event = {os.pullEvent()}
		if event[1] == "char" then
			quantity = string.sub(quantity, 1, pos)..event[2]..string.sub(quantity, pos + 1)
			pos = pos + 1
			redraw()
		elseif event[1] == "paste" then
			quantity = string.sub(quantity, 1, pos)..event[2]..string.sub(quantity, pos + 1)
			pos = pos + #event[2]
			redraw()
		elseif event[1] == "key" then
			if event[2] == keys.enter then
				local num = tonumber(quantity)
				if num and num == math.floor(num) then
					os.queueEvent("send_request", chosen, num)
					chosen = nil
					return
				end
			elseif event[2] == keys.left then
				if pos > 0 then
					pos = pos - 1
					redraw()
				end
			elseif event[2] == keys.right then
				if pos < #quantity then
					pos = pos + 1
					redraw()
				end
			elseif event[2] == keys.backspace then
				if pos > 0 then
					quantity = string.sub(quantity, 1, pos - 1)..string.sub(quantity, pos + 1)
					pos = pos - 1
					redraw()
				elseif #quantity == 0 then
					return
				end
			elseif event[2] == keys.home then
				if pos > 0 then
					pos = 0
					redraw()
				end
			elseif event[2] == keys.delete then
				if pos < #quantity then
					quantity = string.sub(quantity, 1, pos)..string.sub(quantity, pos + 2)
					redraw()
				end
			elseif event[2] == keys["end"] then
				if pos < #quantity then
					pos = #quantity
					redraw()
				end
			end
		elseif event[1] == "mouse_click" and event[2] == 1 and event[4] == 6 then
			if x >= 2 and x <= 9 then
				local num = tonumber(quantity)
				if num and num == math.floor(num) then
					os.queueEvent("send_request", chosen, num)
				end
				chosen = nil
				return
			elseif x >= 11 and x <= 18 then
				chosen = nil
				return
			end
		elseif event[1] == "redraw" then
			redraw()
		end
	end
end

local function buildModal()
	xOffset = (width - 19) / 2 + 1
	yOffset = (height - 7) / 2 + 1
	co.modal = {thread = coroutine.create(modal), buffer = framebuffer.new(19, 7, term.isColor(), xOffset, yOffset)}
	coroutine.resume(co.modal.thread)
end


local function searchBar()
	term.setCursorBlink( true )

	local pos = 0

	local w = (term.getSize()) - 2
	local sx = term.getCursorPos()

	local function redraw()
		term.setBackgroundColor(colors.white)
		term.setTextColor(colors.black)
		local scroll = 0
		if sx + pos >= w then
			scroll = (sx + nPos) - w
		end

		local cx,cy = term.getCursorPos()
		term.setCursorPos(sx, cy)
		local viewLen = cx - sx + 1
		if #search < viewLen then
			term.write(search..string.rep(" ", viewLen - #search))
			term.setTextColor(colors.red)
			term.write(" X")
		else
			term.write(string.sub(search, scroll + 1))
			term.setTextColor(colors.red)
			term.write(" X")
		end
		term.setTextColor(colors.black)

		term.setCursorPos(sx + pos - scroll, cy)
	end

	redraw()

	while true do
		local event = {os.pullEvent()}
		if event[1] == "char" then
			search = string.sub(search, 1, pos)..event[2]..string.sub(search, pos + 1)
			pos = pos + 1
			redraw()
		elseif event[1] == "paste" then
			search = string.sub(search, 1, pos)..event[2]..string.sub(search, pos + 1)
			pos = pos + #event[2]
			redraw()
		elseif event[1] == "key" then
			if event[2] == keys.enter then
				local chosen
				if #selected > 0 then
					chosen = selected
				else
					chosen = sortedItems[1].hash
				end
				buildModal()
			elseif event[2] == keys.left then
				if pos > 0 then
					pos = pos - 1
					redraw()
				end
			elseif event[2] == keys.right then
				if pos < #search then
					pos = pos + 1
					redraw()
				end
			elseif event[2] == keys.backspace then
				if pos > 0 then
					search = string.sub(search, 1, pos - 1)..string.sub(search, pos + 1)
					pos = pos - 1
					redraw()
				end
			elseif event[2] == keys.home then
				if pos > 0 then
					pos = 0
					redraw()
				end
			elseif event[2] == keys.delete then
				if pos < #search then
					search = string.sub(search, 1, pos)..string.sub(search, pos + 2)
					redraw()
				end
			elseif event[2] == keys["end"] then
				if pos < #search then
					pos = #search
					redraw()
				end
			end
		elseif event[1] == "term_resize" or event[1] == "window_resize" then
			w = (term.getSize()) - 2
			redraw()
		elseif event[1] == "redraw" then
			redraw()
		end
	end
end

local function list()
	local scroll = 0

	local function redraw()
		term.clear()
		term.setCursorPos(1, 1)
		local x, y = term.getSize()
		for i = 1, y do
			local obj = sortedItems[scroll + i]
			term.setCursorPos(1, i)
			local line = " "
			if obj then
				if obj.prettyName then
					line = line..obj.prettyName
				else
					line = line..obj.name.." "..obj.damage
				end
				local count = getDisplayCount(obj.count).." "
				count = "|"..string.rep(" ", 8 - #count)..count
				line = line..string.rep(" ", x - (#line + #count))..count
			end
			term.setBackgroundColor(i % 2 == 0 and colors.black or colors.gray)
			term.setTextColor(colors.white)
			term.write(line)
		end
	end

	local function scrollUp(dist)
		local delta = 0
		if scroll > 0 then
			delta = scroll
			scroll = math.max(scroll - dist, 0)
			delta = delta - scroll
		end
		if lineSelection > 0 then
			lineSelection = math.max(lineSelection - delta, 1)
		end
	end

	local function scrollDown(dist)
		local delta = 0
		if scroll + y < #sortedItems then
			delta = scroll
			scroll = math.min(scroll + dist, #sortedItems - y)
			delta = scroll - delta
		end
		if lineSelection > 0 then
			lineSelection = math.min(lineSelection + delta, #sortedItems)
		end
	end

	rebuildItems()
	redraw()
	while true do
		local event == {os.pullEvent()}
		if event[1] == "key" then
			if event[2] == keys.down then
				if lineSelection < 0 then
					lineSelection = scroll + 1
				else
					lineSelection = lineSelection + 1
				end
				if lineSelection - scroll > y / 2 and scroll + y < #sortedItems then
					scroll = scroll + 1
				end
			elseif event[2] == keys.up then
				if lineSelection > 1 then
					lineSelection = lineSelection - 1
				elseif lineSelection == 1 then
					lineSelection = -1
				end
				if lineSelection - scroll < y / 2 and scroll > 0 then
					scroll = scroll - 1
				end
			elseif event[2] == keys.pageUp then
				scrollUp(y - 1)
			elseif event[2] == keys.pageDown then
				scrollDown(y - 1)
			end
			selected = sortedItems[lineSelection].hash
			rebuildItems()
			redraw()
		elseif event[1] == "char" then
			rebuildItems()
			redraw()
		elseif event[1] == "mouse_click" then
			if event[2] == 1 then
				--left click, choose that item
				chosen = sortedItems[scroll + event[4]].hash
				buildModal()
			elseif event[2] == 2 then
				--right click, show context menu
			end
		elseif event[1] == "mouse_scroll" then
			if event[2] == -1 then
				scrollUp(3)
			elseif event[2] == 1 then
				scrollDown(3)
			end
			rebuildItems()
			redraw()
		elseif event[1] == "redraw" then
			rebuildItems()
			redraw()
		end
	end
end

local function communicate()
	while true do
		local event = {base.handleEvents(os.pullEventRaw())}
		if event[1] == "rednet_message" then
			local message = event[3]
			if event[4] == "lyq-base" and message.baseCode == config.baseCode then
				if message.type == "master_online" then
					--get list of all stored items
					base.sendToBaseMaster({type = "all_items"}, "lyq-base-inv")
				end
			elseif event[4] == "lyq-base-inv" and message.baseCode == config.baseCode then
				if message.type == "all_items_info" then
					items = message.info
					os.queueEvent("redraw")
				end
			elseif event[4] == "lyq-base-data" and message.baseCode == config.baseCode then
				if message.type == "object_data_info" then
					data = message.data.item
					step = message.step
				elseif message.type == "object_data_step" then
					if message.step ~= step then
						rednet.send(event[2], {type = "object_data", baseCode = config.baseCode}, "lyq-base-data")
					end
				end
			end
		elseif event[1] == "send_request" then
			base.sendToBaseMaster({type = "object_required", object = {class = "item", hash = event[2], count = event[3]}, location = config.locations[1].location}, "lyq-base-inv")
		elseif event[1] == "terminate" then
			print("Stopping")
			return
		end
	end
end

do
	local w, h = term.getSize()
	co.search = {thread = coroutine.create(searchBar), buffer = framebuffer.new(w, 1, term.isColor())}
	co.list = {thread = coroutine.create(list), buffer = framebuffer.new(w, h - 1, term.isColor(), 0, 1)}
	co.comm = {thread = coroutine.create(communicate), buffer = framebuffer.new()}
end

for name, info in pairs(co) do
	local passback = {coroutine.resume(info.thread)}
	if passback[1] then
		info.filter = passback[2]
	end
end

while true do
	local event = {coroutine.yield()}
	for name, info in pairs(co) do
		if (info.filter and info.filter == event[1]) or event[1] == "terminate" then
			if (not co.modal) or (name ~= "search" and name ~= "list") then
				local finalEvent = {unpack(event)}
				if string.match(event[1], "^mouse_") then
					--double "buffer" not a mistake.
					local finalEvent[3], finalEvent[4] = event[3] - info.buffer.buffer.xOffset, event[4] - info.buffer.buffer.yOffset
				end
				local _old = term.redirect(info.buffer)
				--skip the search and list coroutines when modal dialog is active
				local passback = {coroutine.resume(info.thread, unpack(finalEvent))}
				if passback[1] then
					info.filter = passback[2]
				end
				if _old then
					term.redirect(_old)
				else
					term.restore()
				end
			end
		end
	end
	if co.modal and coroutine.status(co.modal.thread) == "dead" then co.modal = nil end
	framebuffer.draw(co.search.buffer)
	framebuffer.draw(co.list.buffer)
	if co.modal then framebuffer.draw(co.modal.buffer) end
	for name, info in pairs(co) do
		if coroutine.status(info.thread) == "dead" then return end
	end
end
