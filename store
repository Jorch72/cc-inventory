--storage computer
--This program controls both input and output for the inventory storage system.  It controls one quad base and two counter blocks.
--left side is retrieve
--right side is store
--back side is quad base

local config = {
	storageSide = "right",
	retrievalSide = "left",
	quadSide = "back",
	baseCode = "",
}

if not os.loadAPI("base") then error("Could not load base API!") end
if not os.loadAPI("configuration") then error("Could not load configuration API!") end

if fs.exists("storage.conf") then
	config = configuration.load("storage.conf")
else
	print("Initial Setup for Storage Controller")
	while true do
		print("What is the name code for this base?")
		print("Base name codes are used to group and differentiate sites.")
		write("> ")
		local baseCode = read()
		if baseCode and #baseCode > 0 then
			config.baseCode = baseCode
			break
		else
			print("A base name code is required!")
		end
	end
	configuration.save("storage.conf", config)
end

peripheral.find("modem", function(name) rednet.open(name) end)

local serviceProtocol = {
	protocol = "lyq-inv",
	name = "inventory",
	online = "storage_online",
	offline = "storage_offline",
}

base.initialize(config.baseCode, nil, serviceProtocol, nil, true)

while true do
	local event = {base.handleEvents(os.pullEventRaw())}
	if event[1] == "item_count" then
		if event[2] == config.storageSide then
			if base.sendToServiceMaster({type = "store", info = {name = event[3], damage = event[4], count = event[5]}}) then
				io.write("Storage Pending "..tostring(event[5]).." of "..tostring(event[3]).."-"..tostring(event[4]).."\n")
			else
				io.write("Storage Failed!\n")
			end
		elseif event[2] == config.retrievalSide and master then
			if base.sendToServiceMaster({type = "retrieve", info = {name = event[3], damage = event[4], count = event[5]}}) then
				io.write("Retrieved "..tostring(event[5]).." of "..tostring(event[3]).."-"..tostring(event[4]).."\n")
			else
				io.write("Retrieval Stuck!\n")
			end
		end
	elseif event[1] == "rednet_message" and event[4] == "lyq-inv" then
		local master = base.getServiceMaster()
		if master and event[2] == master then
			if event[3].type == "fly_route" then
				peripheral.call(config.quadSide, "flyQuad", event[3].route)
			end
		end
	elseif event[1] == "terminate" then
		print("Stopping")
		return
	end
end
