--base api
--used to interlink different components.

local unpack = unpack or table.unpack

local dnsTime, pingTime, pingWait = 2, 5, 7

local comm = {
	dns = {
		protocol = "lyq-base-dns",
		protocols = {},
	},
	base = {
		master = -1,
		protocol = "lyq-base",
		online = "station_online",
		offline = "station_offline",
		code = "",
		name = "base",
	},
	sub = {
		master = -1,
		protocol = "",
		online = "",
		offline = "",
		name = "",
	},
	servers = {
		--[[
		{
			name = "",
			protocol = "",
			id = -1,
			online = "",
			offline = "",
		}
		]]
	},
	clients = {
		--[[
		{	protocol + online are used to determine which group they go in.
			name = "",
			protocol = "",
			online = "",
			offline = "",
			list = {},
		}
		]]
	},
	subscriptions = {
		protocols = {},
	},
	connections = {
		keepAlive = {},
		ping = -1,
		liveStatus = {},
		clients = {},
		servers = {},
		roles = {},
		searches = {},
		queries = {},
		pendingRoles = {},
		protocol = "lyq-base-conn",
	},
	station = {
		type = "",
		locations = {},
	},
}

local flyQueues = {
	
}

expose = {comm = comm, flyQueues = flyQueues}

local function areLocationsEqual(a, b)
	return a.x == b.x and a.y == b.y and a.z == b.z
end

function getBaseMaster()
	if comm.base.master > -1 then
		return comm.base.master
	else
		return false
	end
end

function getServiceMaster()
	if comm.sub.master > -1 then
		return comm.sub.master
	else
		return false
	end
end

function getClientType(client)
	if #comm.clients.list > 0 then
		for i = 1, #comm.clients.list do
			if comm.clients.list[i] == client then
				return comm.clients.types[i]
			end
		end
		return false, "not a client"
	else
		return false, "no clients"
	end
end

function getClientByType(clientType)
	if #comm.clients.list > 0 then
		for i = 1, #comm.clients.list do
			if comm.clients.types[i] == clientType then
				return comm.clients.list[i]
			end
		end
		return false, "no clients of that type"
	else
		return false, "no clients"
	end
end

function sendToBaseMaster(message, protocol)
	local master = getBaseMaster()
	if master then
		message.baseCode = comm.base.code
		rednet.send(master, message, protocol or comm.base.protocol)
		return true
	else
		return false
	end
end

function sendToServiceMaster(message, protocol)
	local master = getServiceMaster()
	if master then
		message.baseCode = comm.base.code
		rednet.send(master, message, protocol or comm.sub.protocol)
		return true
	else
		return false
	end
end

local function createMissingConnections()
	for i, info in ipairs(comm.servers) do
		if info.id == -1 then
			local found = false
			for j, roleInfo in pairs(comm.connections.pendingRoles) do
				if info.name == roleInfo.name and info.protocol == roleInfo.protocol then
					found = true
					break
				end
			end
			if not found then
				table.insert(comm.connections.pendingRoles, {name = info.name, protocol = info.protocol, hosts = {}, responses = 0})
				comm.connections.searches[os.startTimer(dnsTime)] = i
				rednet.broadcast({type = "lookup", protocol = info.protocol, baseCode = comm.base.code}, comm.dns.protocol)
			end
		end
	end
end

local function clearTimers(list, id)
	local timers = {}
	for timer, num in pairs(list) do
		if num == id then timers[timer] = true end
	end
	for num in pairs(timers) do
		list[num] = nil
	end
end

local function keepAlive(id)
	clearTimers(comm.connections.keepAlive, id)
	comm.connections.keepAlive[os.startTimer(pingWait)] = id
end

local function removeStation(id)
	clearTimers(comm.connections.keepAlive, id)
	for i, serverInfo in ipairs(comm.servers) do
		if serverInfo.id == id then
			serverInfo.id = -1
		end
	end
	comm.connections.roles[id] = nil
	comm.connections.servers[id] = nil
	comm.connections.clients[id] = nil
end

local function handleClientSide(info, event)
	if event[1] == "rednet_message" then
		local id, message, protocol = event[2], event[3], event[4]
		if message.type == "master_online" then
			info.id = id
			io.write("Connected to "..info.name.." master. ("..tostring(id)..")\n")
			if info.protocol == comm.base.protocol and #comm.station.type > 0 then
				--update station info at base master, if applicable.
				rednet.send(info.id, {type = "station_info", stationType = comm.station.type, info = comm.station.locations, baseCode = comm.base.code}, info.protocol)
			end
		elseif id == info.id and message.type == "master_offline" then
			io.write(string.upper(string.sub(info.name, 1, 1))..string.sub(info.name, 2).." master went offline.\n")
			info.id = -1
		end
	end
end

local function handleServerSide(event)
	if event[1] == "rednet_message" then
		local id, message, protocol = event[2], event[3], event[4]
		for i = 1, #comm.clients do
			local info = comm.clients[i]
			if info.online == message.type and info.protocol == protocol then
				local found = false
				for k, clientID in ipairs(info.list) do
					if id == clientID then
						comm.connections.liveStatus[id] = true
						found = true
						break
					end
				end
				if not found then
					table.insert(info.list, id)
					comm.connections.liveStatus[id] = true
				end
				io.write(info.name.." "..tostring(id).." online.\n")
				if message.type == "subscribe" and info.last then
					rednet.send(id, {type = "master_online", baseCode = comm.base.code}, info.protocol)
					rednet.send(id, {type = "subscription_update", data = info.last, baseCode = comm.base.code}, info.protocol)
				else
					rednet.send(id, {type = "master_online", baseCode = comm.base.code}, info.protocol)
				end
				break
			elseif info.offline == message.type and info.protocol == protocol then
				for k, clientID in ipairs(info.list) do
					if id == clientID then
						table.remove(info.list, k)
						comm.connections.liveStatus[id] = nil
						removeStation(id)
						break
					end
				end
				io.write(info.name.." "..tostring(id).." offline.\n")
			end
		end
	end
end

function handleConnection(event)
	handleServerSide(event)
	if event[1] == "rednet_message" then
		local id, message, protocol = event[2], event[3], event[4]
		if protocol == comm.dns.protocol and message.baseCode == comm.base.code then
			if message.type == "lookup" then
				for i = 1, #comm.dns.protocols do
					if comm.dns.protocols[i] == message.protocol then
						rednet.send(id, {type = "lookup_response", protocol = message.protocol, baseCode = comm.base.code}, comm.dns.protocol)
						break
					end
				end
			elseif message.type == "lookup_response" then
				for i, info in ipairs(comm.connections.pendingRoles) do
					if message.protocol == info.protocol then
						table.insert(info.hosts, id)
					end
				end
			end
		elseif protocol == comm.connections.protocol then
			if message.type == "connection_open" and message.baseCode == comm.base.code then
				comm.connections.clients[id] = {liveStatus = true}
				rednet.send(id, {type = "connection_accept", baseCode = comm.base.code}, comm.connections.protocol)
			elseif message.type == "connection_accept" and message.baseCode == comm.base.code then
				comm.connections.servers[id].state = "open"
				keepAlive(comm.connections.keepAlive, id)
				local remove = {}
				for i, info in pairs(comm.connections.pendingRoles) do
					for _, hostID in ipairs(info.hosts) do
						if id == hostID then
							for j, serverInfo in ipairs(comm.servers) do
								if info.protocol == serverInfo.protocol then
									clearTimers(comm.connections.queries, j)
									rednet.send(id, {type = serverInfo.online, baseCode = comm.base.code}, serverInfo.protocol)
									comm.connections.servers[id].roles[j] = true
								end
								remove[i] = true
							end
						end
					end
				end
				for i in pairs(remove) do
					comm.connections.pendingRoles[i] = nil
				end
			elseif message.type == "connection_close" then
				comm.connections.servers[id] = nil
				comm.connections.clients[id] = nil
			elseif message.type == "keepalive_ping" and message.baseCode == comm.base.code then
				if comm.connections.servers[id] then
					rednet.send(id, {type = "keepalive_pong", baseCode = comm.base.code}, comm.connections.protocol)
					keepAlive(comm.connections.keepAlive, id)
				else
					rednet.send(id, {type = "connection_close", baseCode = comm.base.code}, comm.connections.protocol)
				end
			elseif message.type == "keepalive_pong" and message.baseCode == comm.base.code then
				if comm.connections.clients[id] then
					comm.connections.clients[id].liveStatus = true
				end
			end
		else
			for i = 1, #comm.servers do
				local info = comm.servers[i]
				if info.protocol == protocol then
					handleClientSide(info, event)
					break
				end
			end
		end
	elseif event[1] == "timer" then
		if comm.connections.keepAlive[event[2]] then
			local id = comm.connections.keepAlive[event[2]]
			comm.connections.keepAlive[event[2]] = nil
			--[[for i = 1, #comm.connections.roles[id] do
				local info = comm.connections.roles[id][i]
				if info.role == "base" then
					io.write("Base master timed out.\n")
				elseif info.role == "service" then
					io.write("Backend timed out.\n")
				end
			end]]
			removeStation(id)
			os.queueEvent("station_offline", id)
		elseif event[2] == comm.connections.ping then
			local remove = {}
			for id in pairs(comm.connections.clients) do
				if comm.connections.clients[id].liveStatus then
					comm.connections.clients[id].liveStatus = false
					rednet.send(id, {type = "keepalive_ping", baseCode = comm.base.code}, comm.connections.protocol)
				else
					--dead connection
					--io.write(info.name.." "..tostring(id).." timed out.\n")
					io.write("Station "..tostring(id).." timed out.\n")
					os.queueEvent("station_offline", id)
					remove[id] = true
				end
			end
			for id in pairs(remove) do removeStation(id) end
			comm.connections.ping = os.startTimer(pingTime)
		elseif comm.connections.searches[event[2]] then
			local serverNum = comm.connections.searches[event[2]]
			if comm.servers[serverNum] then
				local info = comm.servers[serverNum]
				for i, roleInfo in pairs(comm.connections.pendingRoles) do
					if info.name == roleInfo.name and info.protocol == roleInfo.protocol then
						if #roleInfo.hosts < 1 then
							io.write("Please set up a "..roleInfo.name.." master!\n")
							comm.connections.pendingRoles[i] = nil
						elseif #roleInfo.hosts == 1 then
							local id = roleInfo.hosts[1]
							if comm.connections.servers[id] and comm.connections.servers[id].state == "open" then
								comm.connections.servers[id].roles[serverNum] = true
								rednet.send(id, {type = info.online, baseCode = comm.base.code}, info.protocol)
							else
								comm.connections.queries[os.startTimer(dnsTime)] = serverNum
								info.id = id
								rednet.send(info.id, {type = "connection_open", baseCode = comm.base.code}, comm.connections.protocol)
								comm.connections.servers[id] = {state = "waiting", roles = {}}
							end
						else
							io.write("Too many "..roleInfo.name.." masters on network!\n")
						end
						break
					end
				end
			end
		elseif comm.connections.queries[event[2]] then
			local serverNum = comm.connections.queries[event[2]]
			if comm.servers[serverNum] then
				local info = comm.servers[serverNum]
				info.id = -1
				for i, roleInfo in pairs(comm.connections.pendingRoles) do
					local roleInfo = comm.connections.pendingRoles[i]
					if info.name == roleInfo.name and info.protocol == roleInfo.protocol then
						comm.connections.pendingRoles[i] = nil
						break
					end
				end
			end
		end
	end
	createMissingConnections()
end

local function handleSubscriptions(event)
	if event[1] == "rednet_message" then
		local id, message, protocol = event[2], event[3], event[4]
		if message.type == "subscription_update" then
			for i = 1, #comm.servers do
				local info = comm.servers[i]
				if info.protocol == protocol then
					os.queueEvent("subscription_update", info.name, message.data)
				end
			end
		end
	end
end

local function handleFlightDispatching(event)
	if event[1] == "rednet_message" and event[4] == comm.base.protocol and event[3].baseCode == comm.base.code then
		if event[2] == comm.base.master then
			if event[3].type == "fly_route" then
				for i, info in ipairs(flyQueues) do
					if info.location and areLocationsEqual(info.location, event[3].location) then
						info.queue:add({route = event[3].route, location = event[3].location, id = event[3].id})
						break
					end
				end
			elseif event[3].type == "master_online" then
				for i, info in ipairs(flyQueues) do
					if info.location then
						sendToBaseMaster({type = "flight_base_info", info = {count = peripheral.call(info.queue.side, "getQuadCount"), location = info.location}})
					end
				end
			end
		end
	elseif event[1] == "quad_landed" then
		for i, info in ipairs(flyQueues) do
			if event[2] == info.queue.side and info.location then
				sendToBaseMaster({type = "flight_arrived", location = info.location})
				break
			end
		end
	else
		for i, info in ipairs(flyQueues) do
			local result = {info.queue:handleEvents(unpack(event))}
			if result[1] == "route_depart" and info.location then
				sendToBaseMaster({type = "flight_dispatched", result[3].id, result[3].location})
			end
		end
	end
end

function handleEvents(...)
	local event = {...}
	handleConnection(event)
	if event[1] == "rednet_message" then
		if comm.subscriptions.protocols[event[4]] then
			handleSubscriptions(event)
		end
	elseif event[1] == "terminate" then
		if comm.base.master > -1 then rednet.send(comm.base.master, {type = comm.base.offline, baseCode = comm.base.code}, comm.base.protocol) end
		if comm.sub.master > -1 then rednet.send(comm.sub.master, {type = comm.sub.offline, baseCode = comm.base.code}, comm.sub.protocol) end
		if comm.clients.protocol then
			rednet.unhost(comm.clients.protocol)
			for i = 1, #comm.clients.list do
				rednet.send(comm.clients.list[i], {type = "master_offline", baseCode = config.baseCode}, comm.clients.protocol)
			end
		end
	end
	if #flyQueues > 0 then
		handleFlightDispatching(event)
	end
	return unpack(event)
end

local function createServerEntry(name, protocol, online, offline)
	io.write("Adding "..name.." server.\n")
	table.insert(comm.servers, {name = name, online = online, offline = offline, protocol = protocol, id = -1})
end

local function createClientEntry(name, protocol, online, offline)
	table.insert(comm.clients, {name = name, online = online, offline = offline, protocol = protocol, list = {}})
	if os.getComputerLabel() then
		io.write("Serving "..name.." clients.\n")
		for i = 1, #comm.dns.protocols do
			if comm.dns.protocols[i] == protocol then error("Already hosting this protocol.", 3) end
		end
		table.insert(comm.dns.protocols, protocol)
	else
		error("You must label this computer first.", 0)
	end
end

function initialize(baseCode, stationInfo, nobase)
	io.write("Initializing inter-base communications.\n")
	comm.base.code = baseCode
	if stationInfo then
		comm.station.type = stationInfo.type
		comm.station.locations = stationInfo.locations
	end
	if not nobase then
		io.write("Searching for base master...\n")
		createServerEntry("base", comm.base.protocol, comm.base.online, comm.base.offline)
	end
	if #comm.clients > 0 then comm.connections.ping = os.startTimer(pingTime) end
	createMissingConnections()
end

function addServerConnection(name, protocol, online, offline)
	createServerEntry(name, protocol, online, offline)
end

function addClientConnection(name, protocol, online, offline)
	createClientEntry(name, protocol, online, offline)
end

function updateSubscribers(protocol, data)
	for i = 1, #comm.clients do
		local info = comm.clients[i]
		if info.protocol == protocol then
			info.last = data
			for j = 1, #info.list do
				rednet.send(info.list[j], {type = "subscription_update", data = info.last, baseCode = comm.base.code}, info.protocol)
			end
		end
	end
end

function addSubscription(channel, protocol)
	comm.subscriptions.protocols[protocol] = channel
	createServerEntry(channel, protocol, "subscribe", "unsubscribe")
end

function addFlightBase(flightQueue, location)
	table.insert(flyQueues, {queue = flightQueue, location = location})
end

function setup(conf, location, face)
	while not os.getComputerLabel() do
		print("Please provide a label for this computer.")
		write("> ")
		local label = read()
		if #label >= 1 then
			os.setComputerLabel(label)
			break
		else
			print("A label is required!")
		end
	end
	while true do
		print("What is the name code for this base?")
		print("Base name codes are used to group and differentiate sites.")
		write("> ")
		local baseCode = read()
		if baseCode and #baseCode > 0 then
			conf.baseCode = baseCode
			break
		else
			print("A base name code is required!")
		end
	end
	if location then
		local loc = vector.new(gps.locate())
		if loc.y == 0 then
			local x, y, z
			repeat
				print("What is this station's X coordinate?")
				print("Use the location of this computer.")
				write("> ")
				x = tonumber(read())
				if not (x and x == math.floor(x)) then
					print("A valid integer is required!")
					x = nil
				end
			until x
			repeat
				print("What is this station's Y coordinate?")
				print("Use the location of this computer.")
				write("> ")
				y = tonumber(read())
				if not (y and y == math.floor(y) and y > 0) then
					print("A valid positive integer is required!")
					y = nil
				end
			until y
			repeat
				print("What is this station's Z coordinate?")
				print("Use the location of this computer.")
				write("> ")
				z = tonumber(read())
				if not (z and z == math.floor(z)) then
					print("A valid integer is required!")
					z = nil
				end
			until z
			loc = vector.new(x, y, z)
		end
		conf.location = loc
	end
	if face then
		while true do
			print("Which direction does this station face?")
			print(face)
			print("Enter 1 - 4, corresponding to the correct direction:")
			print("1. north      2. east")
			print("3. south      4. west")
			write("> ") 
			local direction = tonumber(read())
			if direction and direction == math.floor(direction) and direction >= 1 and direction <= 4 then
				conf.facing = direction
				break
			else
				print("A valid direction is required!")
			end
		end
	end
end

function fillObjectData(obj)
	if obj.class == "item" then
		if not obj.hash then
			if obj.name and obj.damage then
				if obj.damage > 0 then
					obj.hash = obj.name.."-"..obj.damage
				else
					obj.hash = obj.name
				end
			end
		end
		if not obj.name then
			if obj.hash then
				local name, damage = string.match(obj.hash, "(.-)%-(%d+)$")
				if name and damage then
					obj.name, obj.damage = name, damage
				else
					obj.name, obj.damage = obj.hash, 0
				end
			end
		end
		return obj
	else
		return false
	end
end
